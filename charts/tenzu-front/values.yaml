# Default values for tenzu-front.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Used by name template: to fill the app.kubernetes.io/name label
# @default -- will use .Chart.Name
nameOverride: ""
# -- Used by fullname template: to fill the name of all created kubernetes component
# @default -- will use .Release.Name suffixed with name template, if .Release.Name does not already contains it
fullnameOverride: ""

# -- number of pod replicas for the frontend Deployment if not using autoscaling
# see: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

sentry:
  # -- Whether to set the environment variable expected by the error tracker
  enabled: False
  # -- (string) Used to populate json config `sentry.dsn`
  dsn:
  # -- (string) Used to populate json config `sentry.environment`,
  # sentry.release will be set using the image.tag value when docker image is built
  environment:

# -- Image to use for the application
# see: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/biru-scop/tenzu-back
  pullPolicy: IfNotPresent
  # -- Overrides the image tag
  tag: latest

# -- (list) List of secrets needed to pull an image from a private repository
# see: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:

# -- service account properties
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # @default -- If create is true, a name is generated using the fullname template, else it will be set to "default"
  name: ""

# -- Extra annotation to put on frontend Deployment object
# see: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# -- Extra labels to put on frontend Deployment object
# see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}
# -- definition of the pod level securityContext on frontend Deployment object
podSecurityContext: {}
# -- definition of the container level securityContext on frontend Deployment object
securityContext: {}

# -- see: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # -- service type defined for the frontend
  type: ClusterIP
  # -- service port to access the frontend
  port: 80

# -- properties used to define an Ingress
# see: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  # -- will be used to set ingressClassName and "kubernetes.io/ingress.class" annotation depending on k8s version
  className: ""
  # -- ingress annotations, can be "kubernetes.io/ingress.class", "kubernetes.io/tls-acme", "cert-manager.io/cluster-issuer", etc.
  # @default -- Will set kubernetes.io/ingress.class to ingress.className if needed
  annotations: {}
  # -- list of the hosts that will be exposed
  hosts: []
  # -- Expect values in format {secretName: "", hosts: []},
  # If one of the domain in `ingress.hosts` is also defined as `global.backendUrl.host`
  # You must take care to define tls for it if you also set `global.backendUrl.scheme` to "https"
  tls: []

# -- container's resources definition set on every jobs and on the frontend Deployment object,
# If you want to set it, use the following format: `{limits: {cpu: 100m, memory: 128Mi}, requests: cpu: 100m, memory: 128Mi}}`
resources: {}


# -- livenessProbe for the container of the frontend service
# see: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
# -- readinessProbe for the container of the frontend service
# see: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  httpGet:
    path: /
    port: http
# -- Whether to define a HorizontalPodAutoscaler with the following scaling properties on cpu and memory consumption
# see: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# -- nodeSelector pod property for the frontend Deployment object
nodeSelector: {}
# -- tolerations pod property for the frontend Deployment object
tolerations: []
# -- affinity pod property for the frontend Deployment object
affinity: {}


# -- global values to share properties among charts.
global:
  # -- url used to serve the backend, will be used to set json config `api.baseDomain`, `api.scheme` and `wsUrl`
  backendUrl:
    scheme: 'https'
    websocketScheme: 'wss'
    # -- (string)
    host:
# -- used to populate configuration file
config:
  # -- ("dev","staging","demo","production") name of the environnement, will change the content of the application banner (only production has no displayed banner)
  environment: "production"
  # -- used in backend api url path, modify only for advanced use cases where you really need to rewrite the url, you'll need heavy reverse proxy config if you want to change this
  prefix: "v1"
  # -- used in backend api url path, modify only for advanced use cases where you really need to rewrite the url, you'll need heavy reverse proxy config if you want to change this
  suffixDomain: "api"
