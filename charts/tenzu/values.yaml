# Default values for tenzu.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

postgresql:
  enabled: true

redis:
  enabled: true

tenzu-back:
  # Configure the pvc specs used for static and media files
  persistentVolumeClaim:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 10Gi
  # storageClassName: longhorn
  
  # Specify redis configuration for backend
  redis:
    # By default we add, health_check_interval: 5 as option
    options: '{"health_check_interval": 5}'
    # The host to connect to redis
    # host: "redis-headless.namespace.svc.cluster.local"

    # The password to connect to redis if needed
    # password: ""
    
    # If you want to use an existing secret for the password instead
    # existingSecret: "my-redis-secret"
    # The key that contains the password
    # passwordKey: "passwordKey"

  sentry:
    # Specify if you want to enable sentry
    enabled: False
    # Specify your sentry DSN and environment
    # dsn: ""
    # environment: ""
    # the release is linked to the .image.tag
    
  email:
    # If the email server uses tls
    tls: True
    # If the email server uses ssl
    ssl: False

    # The default from email
    # defaultFrom: "from@mycompany.com"
    
    # The host of the email server
    # host: "ssl0.ovh.net"
    # The user of the email server
    # user: "myUser@mycompany.com"
    # The password of the email server
    # password: "verySecurePassword"
  # The email for the support
  # supportEmail: "ask@tenzu.net"
  
  # If you want to define extra env variables for the pod
  env: []
    # - name: TENZU_POD_IP
    #   valueFrom:
    #     fieldRef:
    #       fieldPath: status.podIP
    # - name: IMPORTANT_ENV
    #   value: "important"


  # If you want to load the env variables from a secret or a configmap
  envFrom: []
    # - secretRef:
    #     name: tenzu-secrets
    # - configMapRef:
    #     name: tenzu-secrets

  # The number of replicas runned for the backend part
  replicaCount: 1

  # The number of workers runner for the backend part
  workersQuantity: 1
  workersTimeout: 120
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - chart-example.local


tenzu-front:
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1

  # To enable sentry on the Frontend part
  sentry:
    enabled: false
    # dsn: ""
    # environment: ""

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local



# global:
#   # Define the tenzu domains !NEED TO BE DEFINED!
#   tenzu: 
#     frontendDomain: tenzu-test.biru.sh
#     backendDomain: tenzu-api-test.biru.sh
#   # Define the postgresql credentials in global (will be used by bitnami/postgresql)
#   postgresql:
#     auth:
#       username: "tenzu"
#       database: "tenzu"
#       password: "DUApA!KV6baWixBCNVoce7x*ktZercmF9pbKH^^9yiX"
#   # Define the redis password in global (will be used by bitnami/redis)
#   redis:
#     password: "ova8iP9Gesh@6P8fNqDg$4hhEfhpUyXak8Qac84fkUZ"